"use strict";(self.webpackChunkdoc_forge=self.webpackChunkdoc_forge||[]).push([[2556],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return t?i.createElement(g,a(a({ref:n},c),{},{components:t})):i.createElement(g,a({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},88707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=t(87462),r=(t(67294),t(3905));const o={sidebar_position:5,title:"Configurations",description:"Comment ajouter un fichier de configuration \xe0 son mod ?",tags:["bases"]},a=void 0,l={unversionedId:"bases/configs",id:"bases/configs",title:"Configurations",description:"Comment ajouter un fichier de configuration \xe0 son mod ?",source:"@site/docs/bases/configs.mdx",sourceDirName:"bases",slug:"/bases/configs",permalink:"/bases/configs",draft:!1,editUrl:"https://github.com/Les-Moddeurs-Francais/Documentation-Forge/edit/master/docs/bases/configs.mdx",tags:[{label:"bases",permalink:"/tags/bases"}],version:"current",lastUpdatedBy:"Mysterious_Dev",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Configurations",description:"Comment ajouter un fichier de configuration \xe0 son mod ?",tags:["bases"]},sidebar:"documentationSidebar",previous:{title:"Tags",permalink:"/bases/resources/tags"},next:{title:"Exporter le mod",permalink:"/bases/exportation"}},s={},u=[{value:"Classe de configuration",id:"classe-de-configuration",level:2},{value:"Client",id:"client",level:3},{value:"Server",id:"server",level:3},{value:"Common",id:"common",level:3},{value:"Enregistrement",id:"enregistrement",level:2},{value:"Utilisation dans le code",id:"utilisation-dans-le-code",level:2}],c={toc:u};function p(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Il sera parfois utile d'avoir une configuration pour votre mod. Que ce soit pour que vous puissiez tester certaines\nfonctionnalit\xe9s ou m\xeame permettre aux joueurs de personnaliser leur exp\xe9rience de jeu."),(0,r.kt)("p",null,"Gr\xe2ce aux fichiers de configuration, les joueurs pourront moduler certaines valeurs de votre mod et ainsi avoir une\nversion propre \xe0 eux de votre mod sans qu'ils aient \xe0 le recompiler."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Par exemple, le nombre de minerais dans un filon de votre nouveau minerai, les d\xe9g\xe2ts d'une certaine \xe9p\xe9e, le nombre de\npoints de vie d'un mob, etc...")),(0,r.kt)("h2",{id:"classe-de-configuration"},"Classe de configuration"),(0,r.kt)("p",null,"Nous aurons besoin d'une seule classe pour cela. Une classe qui sera plut\xf4t cons\xe9quente en nombre de lignes, mais assez\nsimple en fin de compte."),(0,r.kt)("p",null,"Allons-y progressivement. Cr\xe9ez une classe ",(0,r.kt)("inlineCode",{parentName:"p"},"ModConfig")," avec trois classes imbriqu\xe9es : ",(0,r.kt)("inlineCode",{parentName:"p"},"Client"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Server")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"Common"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ModConfig {\n    \n    public static class Client{\n        \n    }\n    \n    public static class Server{\n        \n    }\n    \n    public static class Common{\n        \n    }\n    \n}\n")),(0,r.kt)("h3",{id:"client"},"Client"),(0,r.kt)("p",null,"On commence par la partie client qui va r\xe9pertorier toutes les variables qui touchent le c\xf4t\xe9 \xe9ponyme du jeu.\nCe seront des valeurs qui serviront \xe0 moduler le rendu graphique du jeu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\npublic static class Client {\n    \n    public final ForgeConfigSpec.BooleanValue showGuiOnDeath;\n    \n    Client(ForgeConfigSpec.Builder builder){\n        builder.comment("Client Configuration for TestMod")\n                .push("client");\n        \n        showGuiOnDeath = builder.define("guiOnDeath", true);\n        \n        builder.pop();\n    }\n    \n}\n')),(0,r.kt)("p",null,"Ici j'ai cr\xe9\xe9 une variable ",(0,r.kt)("inlineCode",{parentName:"p"},"showGuiOnDeath")," de type ",(0,r.kt)("inlineCode",{parentName:"p"},"ForgeConfigSpec.BooleanValue")," qui est simplement une valeur\nbool\xe9nne dans la config. Je n'impl\xe9menterai pas sa fonction dans cette partie, mais imaginez que ce param\xe8tre d\xe9finit si\non affiche l'\xe9cran de mort du joueur \xe0 sa mort (ce qui semble logique \ud83d\ude05)."),(0,r.kt)("p",null,"Dans le constructeur, on indique en param\xe8tre le ",(0,r.kt)("inlineCode",{parentName:"p"},"builder")," qui est l'objet qui repr\xe9sente notre fichier de config\n(qui sera ensuite ",(0,r.kt)("em",{parentName:"p"},"s\xe9rialis\xe9")," en .toml)."),(0,r.kt)("p",null,"Sa m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"comment"),", comme son nom l'indique, ins\xe8re un commentaire dans le fichier, ce qui est bien utile pour la\nlisibilit\xe9 de votre config. La m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"push")," quant \xe0 elle fait office de cat\xe9gorie et permet de regrouper diff\xe9rentes\nvaleurs d'un m\xeame th\xe8me."),(0,r.kt)("p",null,"Ensuite, on affecte la valeur de la config \xe0 notre variable ",(0,r.kt)("inlineCode",{parentName:"p"},"showGuiOnDeath")," que l'on pourra utiliser dans notre code.\nLa m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"define")," prend deux param\xe8tres : le nom affich\xe9 dans la config (ici ",(0,r.kt)("inlineCode",{parentName:"p"},'"guiOnDeath"'),") et sa\nvaleur par d\xe9faut (ici ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),")."),(0,r.kt)("p",null,"Enfin, la m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"pop")," indique que l'on a termin\xe9 la cat\xe9gorie actuelle de notre config (ici ",(0,r.kt)("inlineCode",{parentName:"p"},"'push'"),")"),(0,r.kt)("br",null),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Voil\xe0 le sch\xe9ma de nos trois classes. Elles seront toutes de la m\xeame forme, seul le fond diff\xe9rera."))),(0,r.kt)("h3",{id:"server"},"Server"),(0,r.kt)("p",null,"On retrouve pour la classe ",(0,r.kt)("inlineCode",{parentName:"p"},"Server")," le m\xeame pattern de classe. C'est s\xfbrement cette classe qui va vous int\xe9resser en\npremier lieu, car c'est dans celle-ci que l'on mettra les valeurs qui influeront le comportement du jeu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public static class Server {\n\n    public final ForgeConfigSpec.IntValue timeoutAFK;\n    public final ForgeConfigSpec.IntValue damageCustomSword;\n\n    Server(ForgeConfigSpec.Builder builder) {\n\n        builder.comment("Server configuration")\n                .push("server");\n\n        builder.comment("Amount of seconds before player timeout");\n        timeoutAFK = builder.defineInRange("timeoutAFK", 300, 0, 3600);\n        \n        builder.comment("Amount of damage for the custom sword");\n        damageCustomSword = builder.defineInRange("dmgCustomSword", 4, 4, 10);\n\n        builder.pop();\n    }\n}\n')),(0,r.kt)("p",null,"Si vous avez compris comment \xe7a marche, alors vous avez vu qu'on a une variable pour un hypoth\xe9tique compte \xe0 rebours\navant le kick d'un joueur, ainsi qu'une variable modulant les d\xe9g\xe2ts d'une potentielle \xe9p\xe9e."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Vous remarquerez que les valeurs num\xe9riques sont d\xe9finies sur un intervalle que vous imposez ! (ex: de 4 \xe0 10 pour\n'dmgCustomSword')"))),(0,r.kt)("h3",{id:"common"},"Common"),(0,r.kt)("p",null,"La classe ",(0,r.kt)("inlineCode",{parentName:"p"},"Common")," est assez floue. L'enti\xe8ret\xe9 des param\xe8tres dans cette config ont \xe9t\xe9 d\xe9pr\xe9ci\xe9s dans les derni\xe8res\nversions de Forge. On pourrait s'en passer pour le moment, mais sachez qu'elle est utile pour des choses \"g\xe9n\xe9rales\" de\nvotre mod. Voyez \xe7a comme le choix par d\xe9faut si un de vos param\xe8tres ne rentre pas dans la case client ou serveur."),(0,r.kt)("h2",{id:"enregistrement"},"Enregistrement"),(0,r.kt)("p",null,"Avant de pouvoir utiliser notre config, il va falloir l'enregistrer dans notre mod."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public static final ForgeConfigSpec clientSpec;\npublic static final Client client;\n\nstatic {\n    final Pair<Client, ForgeConfigSpec> specPair = new ForgeConfigSpec.Builder().configure(Client::new);\n    client = specPair.getLeft();\n    clientSpec = specPair.getRight();\n}\n\npublic static final ForgeConfigSpec serverSpec;\npublic static final Server server;\n\nstatic {\n    final Pair<Server, ForgeConfigSpec> specPair = new ForgeConfigSpec.Builder().configure(Server::new);\n    server = specPair.getLeft();\n    serverSpec = specPair.getRight();\n}\n\npublic static final ForgeConfigSpec commonSpec;\npublic static final Common common;\n\nstatic {\n    final Pair<Common, ForgeConfigSpec> specPair = new ForgeConfigSpec.Builder().configure(Common::new);\n    common = specPair.getLeft();\n    commonSpec = specPair.getRight();\n}\n\n@SubscribeEvent\npublic static void modLoading(final ModConfigEvent.Loading e) {\n    LogManager.getLogger().debug(Logging.PREPVID_CONFIG, "Config Loaded");\n}\n')),(0,r.kt)("p",null,"Je vous l'accorde, \xe0 premi\xe8re vue ce gros bout code n'est pas tr\xe8s fameux, mais en le d\xe9composant ce n'est finalement\npas si compliqu\xe9 (promis \ud83d\ude05)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static final ForgeConfigSpec clientSpec;\npublic static final Client client;\n\nstatic {\n    final Pair<Client, ForgeConfigSpec> specPair = new ForgeConfigSpec.Builder().configure(Client::new);\n    client = specPair.getLeft();\n    clientSpec = specPair.getRight();\n}\n")),(0,r.kt)("p",null,"Vous l'aurez peut-\xeatre remarqu\xe9, mais il y a trois portions de code qui se ressemble, et celle ci-dessus est l'une\nd'entre-elles."),(0,r.kt)("p",null,"Premi\xe8rement, on d\xe9clare deux variables ",(0,r.kt)("inlineCode",{parentName:"p"},"clientSpec")," et ",(0,r.kt)("inlineCode",{parentName:"p"},"client"),". La variable ",(0,r.kt)("inlineCode",{parentName:"p"},"clientSpec")," servira \xe0 enregistrer la\nconfig dans le mod. C'est \xe0 partir de ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," que nous pourrons r\xe9cup\xe9rer nos valeurs. Ensuite dans un bloc statique\nqui s'ex\xe9cute \xe0 la lecture de la classe on affecte les valeurs des deux variables via la m\xe9thode ",(0,r.kt)("inlineCode",{parentName:"p"},"configure"),". Elle nous\nrenvoie un ",(0,r.kt)("inlineCode",{parentName:"p"},"Pair")," qui \xe9quivaut \xe0 un tuple en Python."),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Faites de m\xeame pour le serveur et le common. \xc7a sera un bon moyen de voir si vous avez compris le truc \ud83d\ude09!")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Il ne reste plus qu'\xe0 enregistrer nos configs dans la classe principale de notre mod (dans son constructeur)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'ModLoadingContext modLoadingContext = ModLoadingContext.get();\n\n// Configs\n\nfinal String configFolder = "prepvid/";\n\nmodLoadingContext.registerConfig(net.minecraftforge.fml.config.ModConfig.Type.CLIENT, ModConfig.clientSpec, configFolder + "client.toml");\nmodLoadingContext.registerConfig(net.minecraftforge.fml.config.ModConfig.Type.SERVER, ModConfig.serverSpec, configFolder + "server.toml");\nmodLoadingContext.registerConfig(net.minecraftforge.fml.config.ModConfig.Type.COMMON, ModConfig.commonSpec, configFolder + "common.toml");\n')),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"La variable ",(0,r.kt)("inlineCode",{parentName:"p"},"configFolder")," me sert \xe0 ne pas r\xe9p\xe9ter le chemin vers le dossier o\xf9 je souhaite enregistrer ma config.\nVous pouvez vous en passer si vous le d\xe9sirez ainsi que modifier le troisi\xe8me param\xe8tre\ndes m\xe9thodes si besoin (vous pouvez omettre le troisi\xe8me param\xe8tre \xe9galement).")),(0,r.kt)("h2",{id:"utilisation-dans-le-code"},"Utilisation dans le code"),(0,r.kt)("p",null,"Par exemple, je vais cr\xe9er une \xe9p\xe9e dont le nombre de d\xe9g\xe2ts sera d\xe9fini dans la config (on modifiera directement le tier de l'item)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public static final Tier TIER = new ForgeTier(1, 3, -2.8f, ModConfig.server.damageCustomSword, 13, MON_TAG, MON_INGREDIENT);\n")),(0,r.kt)("p",null,"Ici le ",(0,r.kt)("inlineCode",{parentName:"p"},"Tier")," de mon \xe9p\xe9e aura pour boost de d\xe9g\xe2ts la valeur ",(0,r.kt)("inlineCode",{parentName:"p"},"ModConfig.server.damageCustomSword")," qu'on avait d\xe9fini\nun peu plus haut."),(0,r.kt)("p",null,"D\xe9sormais si vous lancez le jeu, dans le dossier config du monde vous aurez un dossier avec vos configs \xe0 l'int\xe9rieur o\xf9\nvous pourrez et les joueurs \xe9galement, modifier les valeurs inscrites dans l'intervalle que vous aurez impos\xe9."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("img",{alt:"Exemple de r\xe9sultat",src:t(90936).Z+"#gh-light-mode-only",width:"490",height:"230"}),(0,r.kt)("img",{alt:"Exemple de r\xe9sultat",src:t(13126).Z+"#gh-dark-mode-only",width:"490",height:"228"}))))}p.isMDXComponent=!0},13126:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/resultat_config_dark-4075c8307dba19ede935ad0ff540e6e3.png"},90936:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/resultat_config_light-68f9ab3496032ff5a2bc8d9bccc0fd78.png"}}]);