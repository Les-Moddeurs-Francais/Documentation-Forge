"use strict";(self.webpackChunkdoc_forge=self.webpackChunkdoc_forge||[]).push([[2583],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return g}});var n=t(7294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=n.createContext({}),u=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=u(e.components);return n.createElement(o.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=u(t),g=i,m=p["".concat(o,".").concat(g)]||p[g]||d[g]||l;return t?n.createElement(m,s(s({ref:r},c),{},{components:t})):n.createElement(m,s({ref:r},c))}));function g(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var l=t.length,s=new Array(l);s[0]=p;var a={};for(var o in r)hasOwnProperty.call(r,o)&&(a[o]=r[o]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var u=2;u<l;u++)s[u]=t[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2900:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return o},default:function(){return g},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return d}});var n=t(7462),i=t(3366),l=(t(7294),t(3905)),s=["components"],a={sidebar_position:1,title:"Deferred Register",description:"Comment utiliser les Deferred Registers ?",tags:["enregistrement"]},o=void 0,u={unversionedId:"register/deferred",id:"register/deferred",title:"Deferred Register",description:"Comment utiliser les Deferred Registers ?",source:"@site/docs/register/deferred.md",sourceDirName:"register",slug:"/register/deferred",permalink:"/docs/register/deferred",draft:!1,editUrl:"https://github.com/Les-Moddeurs-Francais/Forge-Doc/edit/master/docs/register/deferred.md",tags:[{label:"enregistrement",permalink:"/docs/tags/enregistrement"}],version:"current",lastUpdatedBy:"Mysterious_Dev",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Deferred Register",description:"Comment utiliser les Deferred Registers ?",tags:["enregistrement"]},sidebar:"tutorialSidebar",previous:{title:"Enregistrement",permalink:"/docs/category/register"},next:{title:"Items",permalink:"/docs/category/items"}},c={},d=[{value:"Cr\xe9er un Deferred Register",id:"cr\xe9er-un-deferred-register",level:2},{value:"Registres g\xe9r\xe9s par Forge",id:"registres-g\xe9r\xe9s-par-forge",level:3},{value:"Registres non g\xe9r\xe9s par Forge",id:"registres-non-g\xe9r\xe9s-par-forge",level:3}],p={toc:d};function g(e){var r=e.components,t=(0,i.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Pour cr\xe9er un Deferred Register, il nous faut tout d'abord ajouter une variable dans une classe o\xf9 nous enregistrerons tous les \xe9l\xe9ments concern\xe9s (comme les items, les blocs, etc...) comme celle-ci :"),(0,l.kt)("h2",{id:"cr\xe9er-un-deferred-register"},"Cr\xe9er un Deferred Register"),(0,l.kt)("h3",{id:"registres-g\xe9r\xe9s-par-forge"},"Registres g\xe9r\xe9s par Forge"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public static final DeferredRegister<Item> MON_REGISTRE = DeferredRegister.create(ForgeRegistries.ITEMS, "modid");\n')),(0,l.kt)("p",null,"Quelques explications :"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"La classe r\xe9f\xe9renc\xe9e entre les chevrons doit correspondre au type d\xe9finit par le premier argument"),(0,l.kt)("li",{parentName:"ul"},"Le premier argument permet de d\xe9finir le type d'\xe9l\xe9ment (liste ci-dessous) que nous allons pouvoir enregistrer (ici, cela sera pour les items)",(0,l.kt)("details",null,(0,l.kt)("summary",null,"Liste des types"),(0,l.kt)("ul",null,(0,l.kt)("li",null,"BLOCKS"),(0,l.kt)("li",null,"FLUIDS"),(0,l.kt)("li",null,"ITEMS"),(0,l.kt)("li",null,"MOB_EFFECTS"),(0,l.kt)("li",null,"SOUND_EVENTS"),(0,l.kt)("li",null,"POTIONS"),(0,l.kt)("li",null,"ENCHANTMENTS"),(0,l.kt)("li",null,"ENTITIES"),(0,l.kt)("li",null,"BLOCK_ENTITIES"),(0,l.kt)("li",null,"PARTICLE_TYPES"),(0,l.kt)("li",null,"CONTAINERS"),(0,l.kt)("li",null,"PAINTING_TYPES"),(0,l.kt)("li",null,"RECIPE_SERIALIZERS"),(0,l.kt)("li",null,"ATTRIBUTES"),(0,l.kt)("li",null,"STAT_TYPES"),(0,l.kt)("li",null,"PROFESSIONS"),(0,l.kt)("li",null,"POI_TYPES"),(0,l.kt)("li",null,"MEMORY_MODULE_TYPES"),(0,l.kt)("li",null,"SENSOR_TYPES"),(0,l.kt)("li",null,"SCHEDULES"),(0,l.kt)("li",null,"ACTIVITIES"),(0,l.kt)("li",null,"WORLD_CARVERS"),(0,l.kt)("li",null,"FEATURES"),(0,l.kt)("li",null,"CHUNK_STATUS"),(0,l.kt)("li",null,"STRUCTURE_FEATURES"),(0,l.kt)("li",null,"BLOCK_STATE_PROVIDER_TYPES"),(0,l.kt)("li",null,"FOLIAGE_PLACER_TYPES"),(0,l.kt)("li",null,"TREE_DECORATOR_TYPES"),(0,l.kt)("li",null,"BIOMES"),(0,l.kt)("li",null,"DATA_SERIALIZERS"),(0,l.kt)("li",null,"LOOT_MODIFIER_SERIALIZERS"),(0,l.kt)("li",null,"WORLD_TYPES")))),(0,l.kt)("li",{parentName:"ul"},"Le deuxi\xe8me quant \xe0 lui est le modid sous lequel votre \xe9l\xe9ment sera enregistr\xe9 (il est pr\xe9f\xe9rable de mettre le modid de votre mod)")),(0,l.kt)("p",null,"Il ne reste plus qu'\xe0 faire comprendre au jeu que le Deferred Register existe et pour cela il faudra disposer ce bout de code dans le constructeur de votre classe principale."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"Classe.NOM_VARIABLE.register(FMLJavaModLoadingContext.get().getModEventBus());\n")),(0,l.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Tous les noms de classes, de variables et de m\xe9thodes sont personnalisables comme vous le souhaitez, et cela, tout au long du tutoriel."))),(0,l.kt)("h3",{id:"registres-non-g\xe9r\xe9s-par-forge"},"Registres non g\xe9r\xe9s par Forge"),(0,l.kt)("p",null,"En raison de certaines particularit\xe9s du code de base, tous les registres ne sont pas g\xe9r\xe9s par Forge. Il peut s'agir de registres statiques, comme ",(0,l.kt)("inlineCode",{parentName:"p"},"RecipeType"),", qui peuvent \xeatre utilis\xe9s en toute s\xe9curit\xe9, ou des registres dynamiques, comme ",(0,l.kt)("inlineCode",{parentName:"p"},"ConfiguredFeature")," et certains autres registres concernant la g\xe9n\xe9ration, qui sont g\xe9n\xe9ralement repr\xe9sent\xe9s en JSON. Ces objets ne doivent \xeatre enregistr\xe9s de cette mani\xe8re que si un autre objet de registre le n\xe9cessite. La fonction ",(0,l.kt)("inlineCode",{parentName:"p"},"DeferredRegister#create")," poss\xe8de une surcharge (depuis la 1.18.2) qui permet aux moddeurs de sp\xe9cifier la cl\xe9 du registre pour lequel il est n\xe9cessaire de cr\xe9er un RegistryObject :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'private static final DeferredRegister<RecipeType<?>> MON_REGISTRE = DeferredRegister.create(Registry.RECIPE_TYPE_REGISTRY, "modid");\n\npublic static final RegistryObject<RecipeType<ExampleRecipe>> MON_TYPE_RECETTE = REGISTER.register("example_recipe_type", () -> new RecipeType<>() {});\n')))}g.isMDXComponent=!0}}]);